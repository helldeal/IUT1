import org.junit.jupiter.api.Test

import org.junit.jupiter.api.Assertions.*

import kotlin.reflect.full.allSuperclasses
import kotlin.reflect.full.memberProperties
import kotlin.reflect.KVisibility
import kotlin.reflect.full.memberFunctions

class TestGroupe {

    val kClass = Groupe::class

    @Test
    fun `Groupe verif`() {
        assertAll(
            {assertFalse(kClass.isAbstract)},
            {assertFalse(kClass.isOpen)},
        )
    }

    @Test
    fun `Groupe verif 10`() {
        var extend = kClass.allSuperclasses.find{it.simpleName == "ObjetGraphique"}
        assertNotNull(extend)
    }

    @Test
    fun `Groupe verif 1`() {
        var extend = kClass.allSuperclasses.find{it.simpleName == "Selectionnable"}
        assertNotNull(extend)
    }

    @Test
    fun `Groupe verif 2`() {
        var member = kClass.memberProperties.find { it.name == "objetsRegroupes" }
        assertAll(
            {assertEquals(KVisibility.PRIVATE, member!!.visibility)},
            {assertFalse(member!!.isOpen)},
            {assertFalse(member!!.isAbstract)},
            {assertEquals("kotlin.Array<ObjetGraphique?>", member!!.returnType.toString())},
        )
    }

    @Test
    fun `Groupe verif 3`() {
        var member = kClass.memberProperties.find { it.name == "nbObjetsRegroupes" }
        assertAll(
            {assertEquals(KVisibility.PRIVATE, member!!.visibility)},
            {assertFalse(member!!.isOpen)},
            {assertFalse(member!!.isAbstract)},
            {assertEquals("kotlin.Int", member!!.returnType.toString())},
        )
    }

    @Test
    fun `Groupe verif 4`() {
        val method = kClass.memberFunctions.find { it.name == "selectionner" }
        assertAll(
            {assertEquals(KVisibility.PUBLIC, method!!.visibility)},
            {var param = method!!.parameters.find {it.name =="ok" }
                assertEquals("kotlin.Boolean", param!!.type.toString())},
        )
    }

    @Test
    fun `Groupe verif 5`() {
        val method = kClass.memberFunctions.find { it.name == "regrouper" }
        assertAll(
            {assertEquals(KVisibility.PUBLIC, method!!.visibility)},
            {var param = method!!.parameters.find {it.name =="objetAjoute" }
                assertEquals("ObjetGraphique", param!!.type.toString())},
        )
    }
}
