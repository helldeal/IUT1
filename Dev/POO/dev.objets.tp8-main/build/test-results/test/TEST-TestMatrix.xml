<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="TestMatrix" tests="62" skipped="0" failures="0" errors="0" timestamp="2022-04-01T07:40:52" hostname="U-INF-J-E114-08" time="0.058">
  <properties/>
  <testcase name="mat nulle est antisymetrique()" classname="TestMatrix" time="0.009"/>
  <testcase name="id(3) != id(5)()" classname="TestMatrix" time="0.001"/>
  <testcase name="random + -random = mat nulle()" classname="TestMatrix" time="0.008"/>
  <testcase name="id - id = mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(3) + id(5) #  # exception()" classname="TestMatrix" time="0.001"/>
  <testcase name="matrice nulle(5) est bien matrice  nulle()" classname="TestMatrix" time="0.001"/>
  <testcase name="random x mat nulle = mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle(1) == random(1)(0,1) ou id(1) == random(1)(0,1)()" classname="TestMatrix" time="0.001"/>
  <testcase name="id(3) - id(5) #  # exception()" classname="TestMatrix" time="0.001"/>
  <testcase name="id(3) + random(5) #  # exception()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(3) - random(5) #  # exception()" classname="TestMatrix" time="0.001"/>
  <testcase name="random1 x random2()" classname="TestMatrix" time="0.001"/>
  <testcase name="random(5) n'est pas matrice nulle()" classname="TestMatrix" time="0.001"/>
  <testcase name="id + (transposee id) est symetrique()" classname="TestMatrix" time="0.001"/>
  <testcase name="mat nulle est symetrique()" classname="TestMatrix" time="0.0"/>
  <testcase name="id x 2()" classname="TestMatrix" time="0.0"/>
  <testcase name="((random transposee) transpose) == random()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(5) est bien id()" classname="TestMatrix" time="0.0"/>
  <testcase name="random - mat nulle = random()" classname="TestMatrix" time="0.001"/>
  <testcase name="matrice ok 10()" classname="TestMatrix" time="0.001"/>
  <testcase name="random ko  # exception()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(3) == id(3)()" classname="TestMatrix" time="0.0"/>
  <testcase name="random(5) x random(3) # exception()" classname="TestMatrix" time="0.0"/>
  <testcase name="((id transposee) transpose) == id()" classname="TestMatrix" time="0.0"/>
  <testcase name="id + -id = mat nulle()" classname="TestMatrix" time="0.001"/>
  <testcase name="mat nulle(3) != random(3)()" classname="TestMatrix" time="0.0"/>
  <testcase name="(id transposee) == id()" classname="TestMatrix" time="0.0"/>
  <testcase name="random + mat nulle = random()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle - random = -random()" classname="TestMatrix" time="0.001"/>
  <testcase name="mat random n'est pas antisymetrique()" classname="TestMatrix" time="0.0"/>
  <testcase name="matrice 0  # exception()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(3) == id(3) + mat nulle(3)()" classname="TestMatrix" time="0.0"/>
  <testcase name="random(5) is id()" classname="TestMatrix" time="0.0"/>
  <testcase name="random1 + random2()" classname="TestMatrix" time="0.001"/>
  <testcase name="id(3) != random(3)()" classname="TestMatrix" time="0.0"/>
  <testcase name="id x random x 2 = random x 2()" classname="TestMatrix" time="0.001"/>
  <testcase name="(random1 x 2) x random2 = (random1 x random2) x 2()" classname="TestMatrix" time="0.001"/>
  <testcase name="id x mat nulle = mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle x 5 == mat nulle()" classname="TestMatrix" time="0.001"/>
  <testcase name="id x 2 == id + id()" classname="TestMatrix" time="0.0"/>
  <testcase name="matrice ok 1()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat id n'est pas antisymetrique()" classname="TestMatrix" time="0.0"/>
  <testcase name="random - random = mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="random + (transposee random) est symetrique()" classname="TestMatrix" time="0.001"/>
  <testcase name="random ko =  # exception()" classname="TestMatrix" time="0.001"/>
  <testcase name="id x random = random()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle x random = mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="random x id = random()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(3) + mat nulle(3) == id(3)()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle(3) + mat nulle(5) #  # exception()" classname="TestMatrix" time="0.0"/>
  <testcase name="id(5) n'est pas matrice nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle(3) != mat nulle(5)()" classname="TestMatrix" time="0.0"/>
  <testcase name="matrice nulle(3) == matrice nulle(3)()" classname="TestMatrix" time="0.0"/>
  <testcase name="matrice -10  # exception()" classname="TestMatrix" time="0.0"/>
  <testcase name="id + id()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat nulle x mat nulle = mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="(mat nulle transposee) == mat nulle()" classname="TestMatrix" time="0.0"/>
  <testcase name="mat id est symetrique()" classname="TestMatrix" time="0.0"/>
  <testcase name="matrice nulle != id()" classname="TestMatrix" time="0.0"/>
  <testcase name="ordre matrice(5) = 5()" classname="TestMatrix" time="0.0"/>
  <testcase name="matrice nulle(5) n'est pas id()" classname="TestMatrix" time="0.001"/>
  <testcase name="mat nulle x id = mat nulle()" classname="TestMatrix" time="0.0"/>
  <system-out><![CDATA[1:
-5  2  5  -2  2  
2  -5  -7  -7  -5  
2  7  6  -4  -6  
3  -9  1  1  -7  
5  7  -9  -4  3  
 
2:
 -1
1:
1  0  0  0  0  
0  1  0  0  0  
0  0  1  0  0  
0  0  0  1  0  
0  0  0  0  1  
 
2:
 -1
1:
1  0  0  0  0  
0  1  0  0  0  
0  0  1  0  0  
0  0  0  1  0  
0  0  0  0  1  
 
2:
 -1
1:
-4  3  -1  3  -7  
5  8  -10  -9  -1  
-6  -6  -5  4  -5  
-6  6  -4  5  -6  
9  6  4  -3  -2  
 
2:
 -1
-5  82  63  -6  17  
49  125  88  50  18  
-45  60  119  -71  118  
-121  -97  -38  -110  -63  
-46  -100  -94  63  -168  

1:
1  0  0  0  0  
0  1  0  0  0  
0  0  1  0  0  
0  0  0  1  0  
0  0  0  0  1  
 
2:
 2
# affiche le produit de matrice identite * 2
2  0  0  0  0  
0  2  0  0  0  
0  0  2  0  0  
0  0  0  2  0  
0  0  0  0  2  

1:
0  0  0  0  0  
0  0  0  0  0  
0  0  0  0  0  
0  0  0  0  0  
0  0  0  0  0  
 
2:
 -1
1:
1  0  0  0  0  
0  1  0  0  0  
0  0  1  0  0  
0  0  0  1  0  
0  0  0  0  1  
 
2:
 -1
1:
8  -3  -3  -5  -7  
-2  2  -3  -6  -6  
-9  -8  -1  7  -7  
-6  -7  -9  -7  9  
8  -4  -8  -10  -8  
 
2:
 -1
1:
8  -3  -3  -5  -7  
-2  2  -3  -6  -6  
-9  -8  -1  7  -7  
-6  -7  -9  -7  9  
8  -4  -8  -10  -8  
 
2:
 -1
-3  -3  -10  2  -9  
-4  6  6  -2  -4  
4  -4  -4  1  -10  
1  2  1  3  -12  
4  6  -2  3  11  

1:
-4  5  -1  -6  -6  
9  -3  -4  -3  0  
-6  3  -5  -4  8  
8  -10  6  7  9  
-3  9  6  -10  -10  
 
2:
 2
1:
-4  5  -1  -6  -6  
9  -3  -4  -3  0  
-6  3  -5  -4  8  
8  -10  6  7  9  
-3  9  6  -10  -10  
 
2:
 2
1:
-10  5  -3  5  4  
-10  -2  1  7  0  
4  -6  -6  -9  9  
-10  0  9  -10  -8  
6  -8  -1  -4  -4  
 
2:
 2
1:
48  19  84  50  25  
12  -40  42  99  -35  
32  59  -78  -89  109  
-186  -5  -114  23  24  
-10  7  -86  -19  -22  
 
2:
 2
1:
0  0  0  0  0  
0  0  0  0  0  
0  0  0  0  0  
0  0  0  0  0  
0  0  0  0  0  
 
2:
 5
1:
1  0  0  0  0  
0  1  0  0  0  
0  0  1  0  0  
0  0  0  1  0  
0  0  0  0  1  
 
2:
 2
1:
4  -6  9  3  1  
4  -1  5  2  -4  
-7  -9  -6  9  -7  
-10  -4  2  -6  6  
3  -10  -2  0  7  
 
2:
 -1
# affiche la somme de 2 matrices identite
2  0  0  
0  2  0  
0  0  2  

]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
